// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

<<<<<<< HEAD
=======
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

>>>>>>> c77b262d8c84c17d7035b7294365e86d51d00c0d
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

<<<<<<< HEAD
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  timezone      String    @default("UTC")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean @default(true)
  contentAlerts   Boolean  @default(true)
  apiQuota        Int      @default(1000)
  apiQuotaUsed    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
} 
=======
model TwitterAccount {
  id            String   @id @default(cuid())
  name          String
  username      String   @unique
  profileImage  String?
  accessToken   String
  refreshToken  String?
  tokenType     String?  @default("Bearer")
  expiresAt     DateTime?
  scope         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  posts         Post[]
}

model GitHubAccount {
  id           String   @id @default(cuid())
  name         String
  username     String   @unique
  email        String?
  profileImage String?
  accessToken  String
  scope        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Post {
  id            String   @id @default(cuid())
  content       String
  scheduledFor  DateTime?
  publishedAt   DateTime?
  status        String   @default("draft") // draft, scheduled, published, failed
  accountId     String
  account       TwitterAccount @relation(fields: [accountId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
>>>>>>> c77b262d8c84c17d7035b7294365e86d51d00c0d
